#!/bin/bash

success=0
total=0

#Look in which map KvK_map.py is located
#We dont look to far to keep the program fast
#If you use these tests in other directories, use the cd-command
#to make sure the tests are excuted in the map with KvK_map.py in it
if [ -f "import_CSV_to_db.py" ]; then
	echo Not changing the directory
else
	echo Changing directory
	cd ..
fi

if [ -f "import_CSV_to_db.py" ]; then
	echo ""
else
	echo Cannot find correct directory
	exit
fi

#Test 1, CSV file not specified
output=$(python import_CSV_to_db.py)

if [ "$output" == "Call file with \"python import_CSV_to_db.py nameofCSVfile\"" ]; then
	echo CSV not specified test successfull
	success=$((success+1))
else
	echo CSV not specified test failed
	echo expected \"Call file with \"python import_CSV_to_db.py nameofCSVfile\"\"
	echo got \"$output\"
	echo ""
fi
total=$((total+1))

#Test 2, CSV file not found
output=$(python import_CSV_to_db.py testdata.csv)

if [ "$output" == "Inputfile: testdata.csv not found!" ]; then
	echo CSV not found test successfull
	success=$((success+1))
else
	echo CSV not found test failed
	echo expected \"Inputfile: testdata.csv not found!\"
	echo got \"$output\"
	echo ""
fi
total=$((total+1))

#Test 3, no specification json found
cp database_tests/testdata.csv testdata.csv

output=$(python import_CSV_to_db.py testdata.csv)

if [ "$output" == "Configfile: testdata.specification.json not found!" ]; then
	echo no specification json test successfull
	success=$((success+1))
else
	echo no specification json test failed
	echo expected \"Configfile: testdata.specification.json not found!\"
	echo got \"$output\"
	echo ""
fi
total=$((total+1))

#Test 4, normal database write
cp database_tests/testdata.specification.json testdata.specification.json
python database_tests/droptable.py testdata

output=$(python import_CSV_to_db.py testdata.csv)

if [ "$output" == "" ]; then
	echo database write test successfull
	success=$((success+1))
else
	echo database write test failed
	echo got \"$output\"
	echo ""
fi
total=$((total+1))

#Test 5, validate values in DB
output=$(python database_tests/database_check.py testdata.csv)

if [ "$output" == "Values consistent" ]; then
	echo database read test successfull
	success=$((success+1))
else
	echo database read test failed
	echo expected \"Read succesfull\"
	echo got \"$output\"
	echo ""
fi
total=$((total+1))

rm testdata.specification.json
rm testdata.csv
python database_tests/droptable.py testdata

#Test 6, test NaN values
cp database_tests/testNaN.csv testNaN.csv
cp database_tests/testNaN.specification.json testNaN.specification.json
python import_CSV_to_db.py testNaN.csv
output=$(python database_tests/database_check.py testNaN.csv)

if [ "$output" == "Values consistent" ]; then
	echo ignore NaN value test successfull
	success=$((success+1))
else
	echo ignore NaN value test failed
	echo expected \"Values consistent\"
	echo got \"$output\"
	echo ""
fi
total=$((total+1))

rm testNaN.specification.json
rm testNaN.csv
python database_tests/droptable.py testNaN


echo $success test successfull out of $total
